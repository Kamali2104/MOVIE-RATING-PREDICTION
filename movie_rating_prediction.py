# -*- coding: utf-8 -*-
"""movie_rating_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OspXHozjAPDisAXpkjy2Zwd-STGYKUSQ
"""

# CODSOFT Internship - Task 2: Movie Rating Prediction
# Author: [Your Name]

# Step 1: Upload the dataset
from google.colab import files
print("Please upload the IMDB-Movie-Data.csv file")
uploaded = files.upload()

# Step 2: Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import LabelEncoder

# Step 3: Load the dataset with proper encoding
df = pd.read_csv("IMDB-Movie-Data.csv", encoding='cp1252')
print("Available columns:\n", df.columns)

# Step 4: Select and clean relevant columns
df = df[['Genre', 'Director', 'Duration', 'Votes', 'Rating']]
df.dropna(inplace=True)

# Step 5: Convert 'Duration' from '123 min' → 123 (integer)
df['Duration'] = df['Duration'].str.extract('(\d+)').astype(int)

# Step 6: Clean 'Votes' column (e.g., "85,340" → 85340)
df['Votes'] = df['Votes'].str.replace(',', '').astype(int)

# Step 7: Encode categorical columns
le_genre = LabelEncoder()
le_director = LabelEncoder()
df['Genre'] = le_genre.fit_transform(df['Genre'])
df['Director'] = le_director.fit_transform(df['Director'])

# Step 8: Define features and target
X = df[['Genre', 'Director', 'Duration', 'Votes']]
y = df['Rating']

# Step 9: Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 10: Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 11: Predict and evaluate
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"\nModel Performance:")
print(f"R² Score: {r2:.4f}")
print(f"Mean Squared Error: {mse:.4f}")

# Step 12: Plot actual vs predicted ratings
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs Predicted Movie Ratings")
plt.grid(True)
plt.tight_layout()
plt.show()